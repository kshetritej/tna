{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/tj/Documents/aws/mental/src/lib/prisma.ts"],"sourcesContent":["import {PrismaClient} from '@prisma/client';\n\nlet prisma: PrismaClient;\n\nif (process.env.NODE_ENV === 'production') {\n  prisma = new PrismaClient();\n} else {\n  if (!(global as any).prisma) {\n    (global as any).prisma = new PrismaClient();\n  }\n  prisma = (global as any).prisma;\n}\n\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI;AAEJ,uCAA2C;;AAE3C,OAAO;IACL,IAAI,CAAC,AAAC,OAAe,MAAM,EAAE;QAC1B,OAAe,MAAM,GAAG,IAAI,6HAAA,CAAA,eAAY;IAC3C;IACA,SAAS,AAAC,OAAe,MAAM;AACjC;uCAEe","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///home/tj/Documents/aws/mental/src/app/api/%28auth%29/signup/doctor/route.ts"],"sourcesContent":["import prisma from \"@/lib/prisma\";\nimport bcrypt from \"bcryptjs\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function POST(request: NextRequest) {\n  const { email, password, name, title, qualification, experience, address, phone, avatar } = await request.json();\n\n  const emailExist = await prisma.user.findUnique({\n    where: {\n      email,\n    },\n  });\n\n  if (emailExist) {\n    return NextResponse.json({ error: \"Email already exists\" }, { status: 400 });\n  }\n\n  const hashedPassword = await bcrypt.hash(password, 10);\n\n  const user = await prisma.user.create({\n    data: {\n      email,\n      password: hashedPassword,\n      name,\n      title,\n      qualification,\n      experience,\n      address,\n      phone,\n      avatar,\n      isDoctor: true,\n    },\n  });\n\n  if (!user) {\n    return NextResponse.json({ error: \"Failed to create user\" }, { status: 500 });\n  }\n\n  return NextResponse.json(user);\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,aAAa,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;IAE9G,MAAM,aAAa,MAAM,sHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QAC9C,OAAO;YACL;QACF;IACF;IAEA,IAAI,YAAY;QACd,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;IAEA,MAAM,iBAAiB,MAAM,wLAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;IAEnD,MAAM,OAAO,MAAM,sHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACpC,MAAM;YACJ;YACA,UAAU;YACV;YACA;YACA;YACA;YACA;YACA;YACA;YACA,UAAU;QACZ;IACF;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;IAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B","debugId":null}}]
}